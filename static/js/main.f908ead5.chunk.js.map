{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","timer","setTimer","setIscative","isStarted","setIsStarted","isStopped","setIsStopped","laptimer","setLapTimer","hasLap","setLap","LapDetails","setLapDetails","LapIndex","setLapIndex","increment","useRef","lapIncrement","SaveNewLap","index","lapTime","overAllTime","hi","lo","time","obj","newObj","id","lapTIme","overallTime","push","sort","a","b","console","log","length","forEach","x","clearHiLo","mx","reduce","indexData","findIndex","min","minIndexData","SetHigh","p","getLapTime","m","Math","floor","slice","s","gfs","ms","getOverAllTime","statTimer","current","setInterval","stopTimer","clearInterval","resetTimer","startLapTimer","className","showInFormat","lapShowInFormat","map","detail","hihg","low","onClick","name","newLapTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f908ead5.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\nconst App = () => {\n    const [timer, setTimer] = useState(0)\n    //for button\n    const [isActive, setIscative] = useState(false)\n    const [isStarted, setIsStarted] = useState(false)\n    const [isStopped, setIsStopped] = useState(false)\n    //for lap\n    const [laptimer, setLapTimer] = useState(0)\n    const [hasLap, setLap] = useState(false)\n    const [LapDetails, setLapDetails] = useState([])\n    const [LapIndex, setLapIndex] = useState(1)\n\n    const increment = useRef(null)\n    const lapIncrement = useRef(null)\n\n    const handleStart = () => {\n        setIscative(true);\n        setIsStarted(true);\n        statTimer();\n    }\n\n    const handleStop = () => {\n        setIsStopped(true)\n        setIsStarted(false)\n        stopTimer()\n    }\n\n    const handleLap = () => {\n        if (!hasLap) {\n            setLap(true);\n        }\n\n        if (laptimer == 0) {\n            let newLapTime = laptimer;\n            newLapTime = timer;\n            console.log('first lap:' + newLapTime);\n\n            SaveNewLap(LapIndex, getLapTime(newLapTime), getOverAllTime(timer), false, false, newLapTime);\n            startLapTimer();\n        } else {\n            SaveNewLap(LapIndex, getLapTime(laptimer), getOverAllTime(timer), false, false, laptimer);\n            setLapTimer(0);\n        }\n    }\n\n    function SaveNewLap(index, lapTime, overAllTime, hi, lo, time) {\n        const obj = LapDetails;\n        const newObj = { id: index, lapTIme: lapTime, overallTime: overAllTime, hi: false, lo: false, time: time };\n        obj.push(newObj);\n\n        obj.sort((a, b) => b.id - a.id);\n        console.log(obj)\n\n        SetHigh()\n\n        setLapIndex((p) => p + 1)\n        setLapDetails(obj);\n    }\n\n    function SetHigh() {\n        const obj = LapDetails;\n\n        if (obj.length > 2) {\n            clearHiLo()\n\n            const mx = obj.reduce((a, b) => a.time > b.time ? a : b);\n            mx.hi = true;\n            let indexData = obj.findIndex((x) => x.id == mx.id);\n            obj[indexData] = mx;\n\n            const min = obj.reduce((a, b) => a.time < b.time ? a : b);\n            min.lo = true;\n            let minIndexData = obj.findIndex((x) => x.id == min.id);\n            obj[minIndexData] = min;\n\n            setLapDetails(obj);\n        }\n    }\n\n    function clearHiLo() {\n        const obj = LapDetails;\n        obj.forEach((x) => x.hi = false);\n        obj.forEach((x) => x.lo = false);\n\n        setLapDetails(obj)\n    }\n\n    function getLapTime(laptimer) {\n        const m = `0${Math.floor(laptimer / 6000)}`.slice(-2);\n        const s = `0${Math.floor(laptimer / 100)}`;\n        const gfs = `0${Math.floor(s % 60)}`.slice(-2);\n        const ms = `0${laptimer}`.slice(-2);\n\n        return `${m}:${gfs}.${ms}`;\n    }\n\n    const getOverAllTime = (timer) => {\n        const m = `0${Math.floor(timer / 6000)}`.slice(-2);\n        const s = `0${Math.floor(timer / 100)}`;\n        const gfs = `0${Math.floor(s % 60)}`.slice(-2);\n        const ms = `0${timer}`.slice(-2)\n\n        return `${m}:${gfs}.${ms}`;\n    }\n\n    const handleResume = () => {\n        setIsStopped(false)\n        setIsStarted(true);\n        statTimer();\n\n        if (hasLap) {\n            startLapTimer();\n        }\n    }\n\n    const handleReset = () => {\n        setIscative(false);\n        setIsStarted(false);\n        setIsStopped(false);\n        setLap(false)\n\n        stopTimer()\n        resetTimer()\n        setLapIndex(1)\n    }\n\n    //timers control\n    const statTimer = () => {\n        increment.current = setInterval(() => {\n            setTimer((timer) => timer + 1)\n        }, 10)\n    }\n\n    const stopTimer = () => {\n        clearInterval(increment.current)\n\n        if (hasLap) {\n            clearInterval(lapIncrement.current)\n        }\n    }\n\n    const resetTimer = () => {\n        setTimer(0)\n\n        if (hasLap) {\n            setLap(false)\n            setLapTimer(0)\n            setLapDetails([])\n        }\n    }\n\n    const startLapTimer = () => {\n        lapIncrement.current = setInterval(() => {\n            setLapTimer((laptimer) => laptimer + 1)\n        }, 10)\n    }\n\n    const showInFormat = () => {\n        const m = `0${Math.floor(timer / 6000)}`.slice(-2);\n        const s = `0${Math.floor(timer / 100)}`;\n        const gfs = `0${Math.floor(s % 60)}`.slice(-2);\n        const ms = `0${timer}`.slice(-2)\n\n\n        return (<span id='time-container'><span>{m} : </span><span>{gfs} . </span><span>{ms}</span></span>)\n    }\n\n    const lapShowInFormat = () => {\n        const m = `0${Math.floor(laptimer / 6000)}`.slice(-2);\n        const s = `0${Math.floor(laptimer / 100)}`;\n        const gfs = `0${Math.floor(s % 60)}`.slice(-2);\n        const ms = `0${laptimer}`.slice(-2)\n\n\n        return (<span id='time-container-lap'><span>{m} : </span><span>{gfs} . </span><span>{ms}</span></span>)\n    }\n\n    return (\n        <div className='main'>\n            <h1 className=\"title\">Stopwatch</h1>\n            <div className='timer'>{showInFormat(timer)}  </div>\n            {\n                hasLap ?\n                    <div id='lap-content'>\n                        <div className='timer-lap'>{lapShowInFormat(timer)}</div>\n                        <div>\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <th>Lap</th>\n                                        <th>Lap times</th>\n                                        <th>Overall time</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {\n                                        LapDetails.map((detail) => {\n                                            return (\n                                                < tr key={detail.id} className={detail.hihg == true ? 'hi' : detail.low == true ? 'lo' : ''}  >\n                                                    <td>{detail.id}</td>\n                                                    <td>{detail.lapTIme}</td>\n                                                    <td>{detail.overallTime}</td>\n                                                </tr>)\n                                        })\n                                    }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div> : <div></div>\n            }\n            <div className='buttons-sect'>{\n                isStarted ? <div>\n                    <button onClick={handleStop} name='stop-btn'>Stop</button>\n                    <button onClick={handleLap} name='lap-btn'>Lap</button>\n                </div> : isStopped ?\n                    <div>\n                        <button onClick={handleResume} name='resume-btn'>Resume</button>\n                        <button onClick={handleReset} name='reset-btn'>Reset</button>\n                    </div> :\n                    <button onClick={handleStart} name='start-btn'>Start</button>\n\n            }\n            </div>\n            <footer className=\"foot-cls\">Made with <span className='high'>♥</span> by <strong>Enmanuel Reyes</strong></footer>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}